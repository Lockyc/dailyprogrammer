extern crate regex;
use std::collections::HashMap;
use regex::Regex;
use std::ascii::AsciiExt;

fn main() {
    let input1 = "This challenge doesn't seem so hard.";
    let input2 = "There are more things between heaven and earth, Horatio, than are dreamt of in your philosophy.";
    let output1 = "Hist aceeghlln denos't eems os adhr.";
    let output2 = "Eehrt aer emor ghinst beeentw aeehnv adn aehrt, Ahioort, ahnt aer ademrt fo in oruy hhilooppsy.";

    challenge(&input1);

}

fn challenge(input: &str) {
    let words = input.split(' ');
    for word in words {
        let mut nonAlphaNumeric = HashMap::new();
        let mut uppercase = HashMap::new();
        for i in 0..word.len() {
            if !word.chars().nth(i).unwrap().is_uppercase() {
                uppercase.insert(i, true);
            }
            if !word.chars().nth(i).unwrap().is_alphanumeric() {
                nonAlphaNumeric.insert(i, word.chars().nth(i).unwrap());
            }
        }
        let re = Regex::new(r"[^a-zA-Z0-9]").unwrap();
        let cleanWord = re.replace_all(word, "");
        let mut sortedCleanWord: Vec<char> = cleanWord.chars().map(|x.collect();
        sortedCleanWord.sort();
        for (key, value) in &nonAlphaNumeric {
            //sortedCleanWord.insert(key, value);
        }
        for (key, value) in &uppercase {
            //sortedCleanWord[key].to_uppercase();
        }
        let s: String = sortedCleanWord.into_iter().collect();
        println!("{}", s);
    }
    println!("{}", input);
}
